'''
1. Continuously update market data
2. Generate events based on market data
3. Process event queue
'''
import time

market_data = DataHandler(..) # LoadData, generates MARKET event on new data arrived
event_queue = EventQueue(..) # Create queue
broker = ExecutionHandler(..) # Connect to broker or process simulation
strategy  = Strategy(..) # Trading strategy - later will use Strategy patter to change during execution
risk_manager = RiskManager(..) # Stores openned positions, and will analyze trading events according to Portfolio and
                               # current market state

while True: # Infinite event loop cycle
    market_data.update()
    while event=event_queue.get():
        if event.type='MARKET':
            # pass to Strategy to geenerate new event
            pass
        elif event.type == 'SIGNAL':
            #  later passed to RiskManager
            pass
        elif event.type == 'ORDER':
            # generated by Strategy and executed here by broker, but
            pass
        elif event.type == 'FILL':
            # confirmation of order execution with concrete price, fee, slipage
            # RiskManager will process this events to update it current metrics and list of opened orders
            pass
        elif event.type == 'STOP':
            # User generated events to manage execution process
            pass
        elif event.type == 'PAUSE':
            # User generated events to manage execution process
            pass

    time.sleep(10)

